#################################################
#############Developer: Shams Tanvir#############
############# ITRE, NCSU#########################
rm(list=ls())
library(ggplot2)
source("R/FES_functions.R")
rawdat<-read.csv("data/trip_data_rev_neg_valueX.csv")
rawdat= as.data.frame(rawdat)
rawdat <- rawdat[complete.cases(rawdat[,5]),]
rawdat$Acceleration <- rep(NA, length(rawdat[,1]))
rawdat$Jerk <- rep(NA, length(rawdat[,1]))
rawdat$Speed.mph <- numconvert(rawdat$speed) * 2.236936
rawdat$TRIP_ID <- as.character(rawdat$trip_history_id)
tripidList <- unique(rawdat$TRIP_ID)
coefficient <- NULL
selected_trip <- rawdat[tripidList %in% selectedTripid,]
selected_trip <- rawdat[rawdat$TRIP_ID %in% selectedTripid, ]
selectedTripid <- tripidList
selected_trip <- rawdat[tripidList %in% selectedTripid,]
selected_trip <- rawdat[rawdat$TRIP_ID %in% selectedTripid, ]
ndat5 <- split(seq(nrow(selected_trip)), selected_trip$TRIP_ID)
for(j in 1:length(ndat5)){
for(i in 2:length(ndat5[[j]])-1){
selected_trip$Acceleration[ndat5[[j]][i]] <- 1.466667 *((selected_trip$Speed.mph[ndat5[[j]][i+1]]-
selected_trip$Speed.mph[ndat5[[j]][i]]))
}
}
ndat5[[1]]
ndat5[1]
length(ndat5[[1]]-1)
length(ndat5[[1]])
length(ndat5[[2]])
length(ndat5[[2]]-1)
2:length(ndat5[[2]])-1
j <- 1
for(i in 2:length(ndat5[[j]])-1){
selected_trip$Acceleration[ndat5[[j]][i]] <- 1.466667 *((selected_trip$Speed.mph[ndat5[[j]][i+1]]-
selected_trip$Speed.mph[ndat5[[j]][i]]))
}
for(i in 1:length(ndat5[[j]])-1){
selected_trip$Acceleration[ndat5[[j]][i]] <- 1.466667 *((selected_trip$Speed.mph[ndat5[[j]][i+1]]-
selected_trip$Speed.mph[ndat5[[j]][i]]))
}
selectedTripid <- sample(tripidList, size = 10) #it is possible to filter the trips here
selected_trip <- rawdat[rawdat$TRIP_ID %in% selectedTripid, ]
ndat5 <- split(seq(nrow(selected_trip)), selected_trip$TRIP_ID)
for(j in 1:length(ndat5)){
for(i in 1:length(ndat5[[j]])-1){
selected_trip$Acceleration[ndat5[[j]][i]] <- 1.466667 *((selected_trip$Speed.mph[ndat5[[j]][i+1]]-
selected_trip$Speed.mph[ndat5[[j]][i]]))
}
}
View(selected_trip)
for(j in 1:length(ndat5)){
for(i in 1:length(ndat5[[j]])-2){
selected_trip$Jerk[ndat5[[j]][i]] <- (selected_trip$Acceleration[ndat5[[j]][i+1]]-
selected_trip$Acceleration[ndat5[[j]][i]])
}
}
length(ndat5[[1]])
ndat5[[1]][502]
ndat5[[2]][502]
ndat5[[2]][length(ndat5[[2]])]
selected_trip$Jerk[ndat5[[2]][length(ndat5[[2]])]]
selected_trip$Acceleration[ndat5[[2]][length(ndat5[[2]])]]
selected_trip$Acceleration[ndat5[[2]][1]]
ndat5[[2]][1]
selected_trip$Jerk[ndat5[[2]][1]]
selected_trip$Acceleration[ndat5[[2]][2]] - selected_trip$Acceleration[ndat5[[2]][1]]
for(j in 1:length(ndat5)){
for(i in 1:(length(ndat5[[j]])-2)){
selected_trip$Jerk[ndat5[[j]][i]] <- (selected_trip$Acceleration[ndat5[[j]][i+1]]-
selected_trip$Acceleration[ndat5[[j]][i]])
}
}
for(j in 1:length(ndat5)){
for(i in 1:length(ndat5[[j]])-2){
selected_trip$Jerk[ndat5[[j]][i]] <- (selected_trip$Acceleration[ndat5[[j]][i+1]]-
selected_trip$Acceleration[ndat5[[j]][i]])
}
}
for(j in 1:length(ndat5)){
for(i in 1:(length(ndat5[[j]])-2)){
selected_trip$Jerk[ndat5[[j]][i]] <- (selected_trip$Acceleration[ndat5[[j]][i+1]]-
selected_trip$Acceleration[ndat5[[j]][i]])
}
}
for(j in 1:length(ndat5)){
for(i in 1:(length(ndat5[[j]])-1)){
selected_trip$Acceleration[ndat5[[j]][i]] <- 1.466667 *((selected_trip$Speed.mph[ndat5[[j]][i+1]]-
selected_trip$Speed.mph[ndat5[[j]][i]]))
}
}
for(j in 1:length(ndat5)){
for(i in 1:(length(ndat5[[j]])-2)){
selected_trip$Jerk[ndat5[[j]][i]] <- (selected_trip$Acceleration[ndat5[[j]][i+1]]-
selected_trip$Acceleration[ndat5[[j]][i]])
}
}
selected_trip$VSP_myway <- CalculateVSP(selected_trip$Speed.mph,
selected_trip$Acceleration)
selected_trip$VSP_Livedrive <- 0.8 + 0.75* (selected_trip$VSP_myway) + 0.001* (selected_trip$VSP_myway)^2
#calculate fuel consumption
breaks <- c(-Inf,0,60, Inf)
a <- c(0.3,0.462, 4.39)
#calculate VSP
selected_trip$VSP_myway <- CalculateVSP(selected_trip$Speed.mph,
selected_trip$Acceleration * 0.305)  #acceleration needs to be in m/s
selected_trip$VSP_Livedrive <- 0.8 + 0.75* (selected_trip$VSP_myway) + 0.001* (selected_trip$VSP_myway)^2
#calculate fuel consumption
breaks <- c(-Inf,0,60, Inf)
a <- c(0.3,0.462, 4.39)
b <- c(0, 0.55,0)
range <- cut(selected_trip$VSP_Livedrive, breaks, labels = FALSE)
selected_trip$FC <- a[range]*(selected_trip$VSP_Livedrive)^b[range]
rawdat <- selected_trip
id <- unique(rawdat$trip_history_id)
id <- unique(as.character(rawdat$trip_history_id))
percentage <- matrix(0,length(ID),9)
percentage <- matrix(0,length(id),9)
trip_id <- unique(as.character(rawdat$trip_history_id))
percentage <- matrix(0,length(trip_id),9)
i <- 1
a=trip_id[i]
sub_data=rawdat[as.character(rawdat$trip_history_id)==a,]
total_time=as.numeric(dim(sub_data)[1])
over_40=as.numeric(dim(sub_data[sub_data$Speed.mph>40,])[1])
over_70=as.numeric(dim(sub_data[sub_data$Speed.mph>70,])[1])
over_1accel=as.numeric(dim(sub_data[sub_data$Acceleration>1,])[1])
over_5accel=as.numeric(dim(sub_data[sub_data$Acceleration>5,])[1])
over_5deccel=as.numeric(dim(sub_data[sub_data$Acceleration<(-5),])[1])
over_neg_Jerk=as.numeric(dim(sub_data[sub_data$Jerk<0,])[1])
over_pos_Jerk=as.numeric(dim(sub_data[sub_data$Jerk>0,])[1])
Jerk_95th=as.numeric(quantile(sub_data$Jerk, .95, na.rm=TRUE))
Jerk_98th=as.numeric(quantile(sub_data$Jerk, .98, na.rm=TRUE))
percentage[i,1]=over_40/total_time
percentage[i,2]=over_70/total_time
percentage[i,3]=over_1accel/total_time
percentage[i,4]=over_5accel/total_time
percentage[i,7]=over_pos_Jerk/(total_time -2)
percentage[i,8]=Jerk_95th
percentage[i,9]=Jerk_98th
totalFCGallon <- as.numeric(sum(sub_data$FC))/2800
averageSpeed <- as.numeric(mean(sub_data$Speed.mph))
totalDistance <- total_time/ (averageSpeed/ 3600) #distance in miles
standardMPG <-  totalDistance /totalFCGallon
totalFCGallon <- as.numeric(sum(sub_data$FC))/2800
totalFCGallon <- as.numeric(sum(sub_data$FC, na.rm = T))/2800
standardMPG <-  totalDistance /totalFCGallon
standardMPG <-  totalDistance /totalFCGallon
totalDistance <- total_time/ (averageSpeed/ 3600) #distance in miles
averageSpeed <- as.numeric(mean(sub_data$Speed.mph))
total_time
502/(17*3600)
totalDistance <- total_time * (averageSpeed/ 3600) #distance in miles
standardMPG <-  totalDistance /totalFCGallon
trip_id
#Matching with Trip_ID in metadata file and put the computed variables
K=as.data.frame(trip_id)
unique_id=cbind(K,percentage)
colnames(unique_id)<- c("trip_history_id",">40mph",">70mph",">1 accel",
">5 accel",">5 deccel","Neg Jerk","Pos Jerk","95th Jerk","98th Jerk")
rawdat <- selected_trip
trip_id <- unique(as.character(rawdat$trip_history_id))
percentage <- matrix(0,length(trip_id),13)  #13 is number of variables
#for loop for calculating variables
for (i in 1:length(trip_id)){
a=trip_id[i]
sub_data=rawdat[as.character(rawdat$trip_history_id)==a,]
total_time=as.numeric(dim(sub_data)[1])
over_40=as.numeric(dim(sub_data[sub_data$Speed.mph>40,])[1])
over_70=as.numeric(dim(sub_data[sub_data$Speed.mph>70,])[1])
over_1accel=as.numeric(dim(sub_data[sub_data$Acceleration>1,])[1])
over_5accel=as.numeric(dim(sub_data[sub_data$Acceleration>5,])[1])
over_5deccel=as.numeric(dim(sub_data[sub_data$Acceleration<(-5),])[1])
over_neg_Jerk=as.numeric(dim(sub_data[sub_data$Jerk<0,])[1])
over_pos_Jerk=as.numeric(dim(sub_data[sub_data$Jerk>0,])[1])
Jerk_95th=as.numeric(quantile(sub_data$Jerk, .95, na.rm=TRUE))
Jerk_98th=as.numeric(quantile(sub_data$Jerk, .98, na.rm=TRUE))
totalFCGallon <- as.numeric(sum(sub_data$FC, na.rm = T))/2800
averageSpeed <- as.numeric(mean(sub_data$Speed.mph, na.rm = T))
totalDistance <- total_time * (averageSpeed/ 3600) #distance in miles
standardMPG <-  totalDistance /totalFCGallon
percentage[i,1]=over_40/total_time
percentage[i,2]=over_70/total_time
percentage[i,3]=over_1accel/(total_time-1)
percentage[i,4]=over_5accel/(total_time -1)
percentage[i,5]=over_5deccel/(total_time -1)
percentage[i,6]=over_neg_Jerk/(total_time -2)
percentage[i,7]=over_pos_Jerk/(total_time -2)
percentage[i,8]=Jerk_95th
percentage[i,9]=Jerk_98th
percentage[i,10]= averageSpeed
percentage[i,11] = totalDistance
percentage[i,12] = totalFCGallon
percentage[i,13] = standardMPG
}
#Matching with Trip_ID in metadata file and put the computed variables
K=as.data.frame(trip_id)
unique_id=cbind(K,percentage)
View(unique_id)
colnames(unique_id)<- c("trip_history_id",">40mph",">70mph",">1 accel",
">5 accel",">5 deccel","Neg Jerk","Pos Jerk","95th Jerk","98th Jerk",
"averageSpeed", "totalDistance", "totalFCGallon", "standardMPG")
new_data <- unique_id
new_data$averagespeedbin <- cut (new_data$averageSpeed, seq(0,100,10),
include.lowest = T)
View(new_data)
#need to have quantile loaded in the environment
quantile <- read.csv(file= "data/quantile3.csv", header= T)
quantile <- quantile[,c(1,2,10)]
new_data <- merge(quantile, new_data, by= "averagespeedbin")
FES_calc2 <- function (MPG, ui, li){
if(MPG > ui) {FES <- 100}
else if (MPG < li) {FES <- 20}
else {FES <- 20+ (MPG - li)/(ui- li)*80}
return(FES)
}
new_data <-  new_data[complete.cases(new_data),]
new_data$FES_recalculated <- mapply(FES_calc2,MPG = new_data$standardMPG,
ui = newdata$ui, li = newdata$li)
new_data$FES_recalculated <- mapply(FES_calc2,MPG = new_data$standardMPG,
ui = new_data$ui, li = new_data$li)
